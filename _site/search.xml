<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[页面布局——三栏布局]]></title>
      <url>/%E8%AE%B0%E5%BD%95/2018/03/26/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h1 id="三栏布局">三栏布局</h1>

<p>首先解释一下什么是“三栏布局”：顾名思义，三栏布局就是在网页上以平铺方式展现的左中右三列布局，其特点在于，左右两列可固定在网页两侧，中间一列永远居中，且当网页宽度大于左右两列宽度之和时，中间一列可随网页整体宽度的变化而变化（简单来说就是两端固定，中间自适应）。</p>

<p>下面围绕的这样的目的，罗列出大约7种解决方法(高度固定)：</p>

<h1 id="浮动布局">浮动布局</h1>
<h2 id="浮动布局的优缺点">浮动布局的优缺点</h2>

<blockquote>
  <p>html代码：</p>
</blockquote>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
    <span class="nc">.container</span><span class="o">&gt;</span><span class="nt">div</span><span class="p">{</span><span class="nl">min-height</span><span class="p">:</span><span class="m">200px</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.left</span><span class="p">{</span><span class="nl">float</span><span class="p">:</span><span class="nb">left</span><span class="p">;</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="no">red</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.center</span><span class="p">{</span><span class="nl">background</span><span class="p">:</span><span class="m">#ff0</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.right</span><span class="p">{</span><span class="nl">float</span><span class="p">:</span><span class="nb">right</span><span class="p">;</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="m">#00f</span><span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"left"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"right"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"center"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre>
</div>

<p>缺点:1. 当宽度小于左右两边宽度之和时，右侧栏会被挤下去；2. html的结构不正确；3.脱离文档流，要处理浮动</p>

<p>优点：比较简单,兼容性好</p>

<h1 id="绝对布局">绝对布局</h1>
<h2 id="绝对布局的优缺点">绝对布局的优缺点</h2>

<blockquote>
  <p>html代码：</p>
</blockquote>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
    <span class="nc">.container</span><span class="o">&gt;</span><span class="nt">div</span><span class="p">{</span><span class="nl">min-height</span><span class="p">:</span><span class="m">200px</span><span class="p">;</span><span class="nl">position</span><span class="p">:</span><span class="nb">absolute</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.left</span><span class="p">{</span><span class="nl">left</span><span class="p">:</span><span class="m">0</span><span class="p">;</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="no">red</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.center</span><span class="p">{</span><span class="nl">left</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">right</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="m">#ff0</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.right</span><span class="p">{</span><span class="nl">right</span><span class="p">:</span><span class="m">0</span><span class="p">;</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="m">#00f</span><span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"left"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"right"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"center"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre>
</div>

<p>缺点：因为布局已经脱离文档流了，意味着下面元素也需要脱离文档流，导致了可用性比较差</p>

<p>优点：快捷</p>

<h1 id="圣杯布局">圣杯布局</h1>
<h2 id="圣杯布局的优缺点">圣杯布局的优缺点</h2>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
    <span class="nc">.container</span><span class="p">{</span><span class="nl">padding</span><span class="p">:</span><span class="m">0</span> <span class="m">300px</span><span class="p">}</span>
    <span class="nc">.container</span><span class="o">&gt;</span><span class="nt">div</span><span class="p">{</span><span class="nl">min-height</span><span class="p">:</span><span class="m">200px</span><span class="p">;</span><span class="nl">float</span><span class="p">:</span><span class="nb">left</span><span class="p">;</span><span class="nl">position</span><span class="p">:</span><span class="nb">relative</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.left</span><span class="p">{</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="no">red</span><span class="p">;</span><span class="nl">margin-left</span><span class="p">:</span><span class="m">-100%</span><span class="p">;</span><span class="nl">left</span><span class="p">:</span><span class="m">-300px</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.center</span><span class="p">{</span><span class="nl">width</span><span class="p">:</span><span class="m">100%</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="m">#ff0</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.right</span><span class="p">{</span><span class="nl">right</span><span class="p">:</span><span class="m">-300px</span><span class="p">;</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">margin-left</span><span class="p">:</span><span class="m">-300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="m">#00f</span><span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"center"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"left"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"right"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre>
</div>

<p>缺点：当父元素有内外边距时，会导致中间栏的位置出现偏差</p>

<p>优点：兼容目前所有的主流浏览器，包括IE6在内；</p>

<h1 id="双飞翼布局">双飞翼布局</h1>
<h2 id="双飞翼布局的优缺点">双飞翼布局的优缺点</h2>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
    <span class="nc">.container</span> <span class="nt">div</span><span class="p">{</span><span class="nl">min-height</span><span class="p">:</span><span class="m">200px</span><span class="p">;</span><span class="nl">float</span><span class="p">:</span><span class="nb">left</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.left</span><span class="p">{</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">margin-left</span><span class="p">:</span><span class="m">-100%</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="no">red</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.center</span><span class="p">{</span><span class="nl">width</span><span class="p">:</span><span class="m">100%</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="m">#ff0</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.center</span> <span class="nc">.center-wrap</span><span class="p">{</span><span class="nl">margin</span><span class="p">:</span><span class="m">0</span> <span class="m">300px</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.right</span><span class="p">{</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">margin-left</span><span class="p">:</span><span class="m">-300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="m">#00f</span><span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"center"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"center-wrap"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"left"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"right"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre>
</div>

<p>缺点：1. 结构不正确 2. 多了一层标签</p>

<p>优点：兼容目前所有的主流浏览器，包括IE6在内；</p>

<h1 id="flex布局">flex布局</h1>
<h2 id="flex布局的优缺点">flex布局的优缺点</h2>

<blockquote>
  <p>html代码：</p>
</blockquote>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
    <span class="nc">.container</span><span class="p">{</span><span class="nl">display</span><span class="p">:</span><span class="n">flex</span><span class="p">}</span>
    <span class="nc">.container</span><span class="o">&gt;</span><span class="nt">div</span><span class="p">{</span><span class="nl">min-height</span><span class="p">:</span><span class="m">200px</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.left</span><span class="p">{</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="no">red</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.center</span><span class="p">{</span><span class="nl">flex</span><span class="p">:</span><span class="m">1</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="m">#ff0</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.right</span><span class="p">{</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="m">#00f</span><span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"left"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"center"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"right"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre>
</div>

<p>缺点：需要考虑浏览器的兼容性</p>

<p>优点：简单实用，未来的趋势</p>

<h1 id="表格布局">表格布局</h1>
<h2 id="表格布局的优缺点">表格布局的优缺点</h2>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
    <span class="nc">.container</span><span class="p">{</span><span class="nl">width</span><span class="p">:</span><span class="m">100%</span><span class="p">;</span><span class="nl">display</span><span class="p">:</span><span class="n">table</span><span class="p">;</span><span class="nl">min-height</span><span class="p">:</span><span class="m">200px</span><span class="p">}</span>
    <span class="nc">.container</span><span class="o">&gt;</span><span class="nt">div</span><span class="p">{</span><span class="nl">display</span><span class="p">:</span><span class="nb">table-cell</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.left</span><span class="p">{</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="no">red</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.center</span><span class="p">{</span><span class="nl">background</span><span class="p">:</span><span class="m">#ff0</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.right</span><span class="p">{</span><span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="m">#00f</span><span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"left"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"center"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"right"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre>
</div>

<p>缺点：无法设置栏间距</p>

<p>优点：兼容性非常好</p>

<h1 id="网格布局">网格布局</h1>
<h2 id="网格布局的优缺点">网格布局的优缺点</h2>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
    <span class="nc">.container</span><span class="p">{</span><span class="nl">width</span><span class="p">:</span><span class="m">100%</span><span class="p">;</span><span class="nl">display</span><span class="p">:</span><span class="n">grid</span><span class="p">;</span><span class="py">grid-template-rows</span><span class="p">:</span><span class="m">100px</span><span class="p">;</span><span class="py">grid-template-columns</span><span class="p">:</span><span class="m">300px</span> <span class="nb">auto</span> <span class="m">300px</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.left</span><span class="p">{</span><span class="nl">background</span><span class="p">:</span><span class="no">red</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.center</span><span class="p">{</span><span class="nl">background</span><span class="p">:</span><span class="m">#ff0</span><span class="p">}</span>
    <span class="nc">.container</span> <span class="nc">.right</span><span class="p">{</span><span class="nl">background</span><span class="p">:</span><span class="m">#00f</span><span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"left"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"center"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"right"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre>
</div>

<p>缺点：兼容性比较差</p>

<p>优点：代码简洁，容易理解</p>
]]></content>
      <categories>
        
          <category> 记录 </category>
        
      </categories>
      <tags>
        
          <tag> html </tag>
        
          <tag> css </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[css盒模型]]></title>
      <url>/%E8%AE%B0%E5%BD%95/2018/03/26/css%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="css盒模型的基本概念">css盒模型的基本概念</h1>

<p>margin、padding、border、content</p>

<h1 id="标准模型和ie模型区别">标准模型和IE模型区别</h1>

<blockquote>
  <p>宽和高的计算方式不同：</p>
</blockquote>

<p>标准模式是content</p>

<p>ie模型的是计算border和padding</p>

<h1 id="css如何设置这两种模型">css如何设置这两种模型</h1>

<p>标准模型：box-sizing:content-box 也是默认模式</p>

<p>IE模型：box-sizing: border-box</p>

<h1 id="js如何获取盒模型对应的宽和高">js如何获取盒模型对应的宽和高</h1>

<p>dom.style.width/height</p>

<p>dom.currentStyle.width/height（只要ie支持）</p>

<p>window.getComputedStyle(dom).width/height（谷歌火狐等支持）</p>

<p>dom.getBoundingClientRect().width/height</p>

<h1 id="根据盒模型解释边距重叠">根据盒模型解释边距重叠</h1>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
    <span class="nc">.parent</span><span class="p">{</span><span class="nl">background</span><span class="p">:</span><span class="no">red</span><span class="p">}</span>
    <span class="nc">.child</span><span class="p">{</span><span class="nl">height</span><span class="p">:</span><span class="m">100px</span><span class="p">;</span><span class="nl">margin-top</span><span class="p">:</span><span class="m">10px</span><span class="p">;</span><span class="nl">background</span><span class="p">:</span><span class="m">#ff0</span><span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"parent"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"child"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre>
</div>

<h1 id="box是什么">BOX是什么</h1>

<p>Box是CSS布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。</p>

<h1 id="bfc">BFC</h1>
<h2 id="bfc的基本概念">BFC的基本概念</h2>

<p>块级格式化上下文，Block Formatting Contexts就是页面上的一个隔离的渲染区域，容器里面的子元素不会在布局上影响到外面的元素，反之也是如此。</p>

<h2 id="bfc的原理">BFC的原理</h2>

<ol>
  <li>两个相邻元素的边距会重叠</li>
  <li>BFC的区域不会与float box重叠。</li>
  <li>BFC是一个独立的容易,外面的元素不会影响里面的元素，里面的元素也不会影响外面的元素</li>
  <li>计算BFC高度的时候，浮动元素也会参与计算</li>
</ol>

<h2 id="怎么创建bfc">怎么创建BFC</h2>

<ol>
  <li>float值不为None</li>
  <li>position不为static或者realtive</li>
  <li>display为inline-block，table-cell,table-caption,flex，inline-flex</li>
  <li>overflow不为visiblev</li>
</ol>
]]></content>
      <categories>
        
          <category> 记录 </category>
        
      </categories>
      <tags>
        
          <tag> html </tag>
        
          <tag> css </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[你好,世界]]></title>
      <url>/%E9%9A%8F%E7%AC%94/2018/03/21/%E4%BD%A0%E5%A5%BD-%E4%B8%96%E7%95%8C/</url>
      <content type="html"><![CDATA[<p>话说，从2016年年初，我就一直有一个想法，就是搭建一个自己的博客，让自己更有归属感。但是奈何 现实太骨感 一开始想的太多，想“完全自己搭建前后端，想…” 结果，一直想了一年多，也没有开始行动 (应该说，从去年才开始用腾讯云搭了一个简单的博客，然后又放弃管了)</p>

<blockquote>
  <p>止到现在，心血来潮，又想找点归属感了</p>
</blockquote>

<p>就在昨天，闲来无事，自己在window搭建jekyll= =一路下来,也不是十分顺利</p>
]]></content>
      <categories>
        
          <category> 随笔 </category>
        
      </categories>
      <tags>
        
          <tag> 随笔 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[一维数组构建指定个数的二位数组]]></title>
      <url>/%E8%AE%B0%E5%BD%95/2018/03/21/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%9E%84%E5%BB%BA%E4%BA%8C%E4%BD%8D%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="cm">/** 
 * 一维数组生成以subArrayNum的二维数组 
 * @param {Array} arr  
 * @param {Number} subArrayNum  
 */</span>  
<span class="kd">function</span> <span class="nx">getMatrix</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">subArrayNum</span><span class="p">)</span> <span class="p">{</span>  
    <span class="c1">// 定义一个数组，长度为原数组的总长度除以subArrayNum向上取整  </span>
    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="nx">subArrayNum</span><span class="p">));</span>  
    <span class="c1">// 遍历该数组  </span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>  
        <span class="c1">// 令数组每一个值都为空数组，即生成二维数组  </span>
        <span class="nx">res</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>  
        <span class="c1">// 为二维数组数据设置为空字符串  </span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">i</span> <span class="o">%</span> <span class="nx">subArrayNum</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>  
            <span class="nx">res</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>  
        <span class="p">}</span>  
    <span class="p">}</span>  
    <span class="c1">// 给二维数组添加数据  </span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>  
        <span class="nx">res</span><span class="p">[</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">i</span> <span class="o">/</span> <span class="nx">subArrayNum</span><span class="p">)][</span><span class="nx">i</span> <span class="o">%</span> <span class="nx">subArrayNum</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>  
    <span class="p">}</span>  
    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>  
<span class="p">}</span>  
</code></pre>
</div>

<blockquote>
  <p>测试我们写的方法：</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>  
<span class="nx">getMatrix</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span><span class="c1">// [[1,2],[3,4],[5,6]]  </span>
</code></pre>
</div>
]]></content>
      <categories>
        
          <category> 记录 </category>
        
      </categories>
      <tags>
        
          <tag> javascript </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
